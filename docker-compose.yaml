version: '3.7'

services:
  movie-bot:
    image: movie-bot
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - telegram-bot-api
      - migrate
      - redis
    volumes:
      - ./:/app
    env_file:
      - .env
    environment:
      REDIS_DSN: "redis://redis:6379/0"
      UPLOADER_URL: 'http://uploader:8000'

  uploader:
    image: movie-bot
    restart: unless-stopped
    depends_on:
      - movie-bot
    env_file:
      - .env
    environment:
      REDIS_DSN: "redis://redis:6379/0"
    entrypoint: [ "uvicorn", "--host", "0.0.0.0", "uploader:app" ]

  uploader-worker:
    image: movie-bot
    restart: unless-stopped
    depends_on:
      - movie-bot
    env_file:
      - .env
    environment:
      REDIS_DSN: "redis://redis:6379/0"
    entrypoint: [ "taskiq", "worker", "--max-async-tasks", "${TASK_LIMIT_PER_WORKER:-2}", "uploader:task_broker" ]

  migrate:
    image: movie-bot
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    tty: true
    entrypoint: [ "alembic", "upgrade", "head" ]

  redis:
    image: redis:7.2.4-alpine3.19
    restart: unless-stopped
    volumes:
      - cache:/data

  telegram-bot-api:
    image: aiogram/telegram-bot-api:latest
    restart: unless-stopped
    environment:
      TELEGRAM_API_ID: "${TELEGRAM_API_ID}"
      TELEGRAM_API_HASH: "${TELEGRAM_API_HASH}"
      TELEGRAM_LOCAL: "1"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "8081" ]
      interval: 1m
      timeout: 10s
      retries: 3
    volumes:
      - telegram-bot-api-data:/var/lib/telegram-bot-api

  postgres:
    image: timescale/timescaledb:latest-pg16
    restart: always
    environment:
      POSTGRES_DB: ${PG_DB:-postgres}
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - database:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "${PG_USER:-postgres}", "-d", "${PG_DB:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - '127.0.0.1:5432:5432'

  metabase:
    image: metabase/metabase:latest
    volumes:
      - /dev/urandom:/dev/random:ro
      - ./metabase-data:/metabase-data
    ports:
      - "127.0.0.1:3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: ${PG_USER:-postgres}
      MB_DB_PASS: ${PG_PASSWORD:-postgres}
      MB_DB_HOST: postgres
    depends_on:
      - migrate
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  telegram-bot-api-data:
  cache:
  database:
