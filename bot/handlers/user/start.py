from aiogram.filters import CommandStart, CommandObject, Command
from dependency_injector.wiring import Provide, inject
from aiogram.utils.deep_linking import decode_payload
from aiogram.types import Message
from aiogram import Router, Bot
from loguru import logger

from core.repositories.user import UserRepository
from bot.keyboards.reply import main_menu
from bot.containers import Container
from bot.utils import tracker

router = Router()


async def _start_handler(message: Message):
    text = f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!</b>\n\n" + \
           "üì∫ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª—É—á—à–µ–º –±–æ—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ –ø—Ä—è–º–æ –≤ Telegram!\n\n" + \
           "–°–º–æ—Ç—Ä–∏—Ç–µ —Å–µ—Ä–∏–∞–ª—ã –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ, –ø–ª–∞–Ω—à–µ—Ç–µ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ." + \
           "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö. –°–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å–µ—Ä–∏–∞–ª—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∂–∞–Ω—Ä–∞–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º." + \
           "–°–∫–∞—á–∏–≤–∞–π—Ç–µ —Å–µ—Ä–∏–∞–ª—ã —Å–µ–±–µ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n\n" + \
           "<i>–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –±—É–¥–µ—Ç–µ —Å–æ–±–ª—é–¥–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤.</i>"
    markup = main_menu()

    await message.answer(
        text,
        parse_mode="html",
        reply_markup=markup
    )


@router.message(CommandStart(deep_link=True), flags={"skip_user_middleware": True})
@tracker("Start: with ref")
@inject
async def cmd_start_ref(
        message: Message, command: CommandObject, bot: Bot,
        user_repository: UserRepository = Provide[Container.user_repository],
        **kwargs
):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cmd_start –≤—ã–∑–≤–∞–Ω")
    logger.info(f"{command.args=}")
    await _start_handler(message)
    logger.debug(kwargs.get("user", None))
    user_id = message.from_user.id
    user_exists = await user_repository.exists(user_id)
    payload = decode_payload(command.args)

    ref = None
    logger.debug(f"{user_exists=}")
    if payload.startswith("ref:"):
        ref = payload.replace("ref:", "")
        ref_owner = await user_repository.get_by_ref(ref)
        logger.debug(f"{ref=} {ref_owner=}")
        if ref_owner is not None and user_exists is False:
            await user_repository.update_views_count(ref_owner, 10)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id:{ref_owner.id} –ø—Ä–∏–≥–ª–∞—Å–∏–ª @{message.from_user.username} [id={user_id}]")
            ref = ref_owner.id
        else:
            ref = None

    if user_exists is False:
        await user_repository.create(user_id, message.from_user.username, ref)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cmd_start –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")


@router.message(Command("start"))
@tracker("Start: default")
async def cmd_start(
        message: Message,
        **kwargs
):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cmd_start –≤—ã–∑–≤–∞–Ω")
    await _start_handler(message)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ cmd_start –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
