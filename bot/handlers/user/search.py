from aiogram_dialog import DialogManager, StartMode
from dependency_injector.wiring import inject, Provide
from aiogram import Router, F, types
from loguru import logger

from core.services.movie import MovieService
from bot.dialogs.const import MOVIES_LIMIT
from bot.dialogs.states import DialogSG
from bot.containers import Container


router = Router()


@router.message(F.text.lower() == '–ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—éüîé')
async def search_by_name(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–∑–≤–∞–ª '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")


@router.message()
@logger.catch()
@inject
async def get_search_results(
        message: types.Message,
        dialog_manager: DialogManager,
        movie_service: MovieService = Provide[Container.movie_service]
):
    query = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–∏–ª—å–º –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
    results = await movie_service.search(query, limit=MOVIES_LIMIT)
    if not results:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    await dialog_manager.start(
        DialogSG.SELECT_MOVIE, mode=StartMode.RESET_STACK, 
        data={"query": query, "data": results}
    )
