import hashlib

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dependency_injector.wiring import inject, Provide
from aiogram import Router, F, types
from redis.asyncio import Redis
from loguru import logger

from bot.keyboards.inline import create_movie_buttons
from bot.schemes import SelectMovieCallbackFactory, UploadMovieCallbackFactory
from core.services.movie import MovieService
from bot.containers import Container


router = Router()


@router.message(F.text.lower() == '–ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—éüîé')
async def search_by_name(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–∑–≤–∞–ª '–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é'")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")


@router.message()
@inject
async def get_search_results(
    message: types.Message, 
    redis: Redis = Provide[Container.redis_client],
    movie_service: MovieService = Provide[Container.movie_service]
):
    query = message.text
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã–±–∏—Ä–∞–µ—Ç —Ñ–∏–ª—å–º –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
    try:
        results = await movie_service.search(query)
        if not results:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        query_hash = hashlib.sha1(query.encode()).hexdigest()
        await redis.hset("query-table", query_hash, query)

        inline_kb = create_movie_buttons(results, query_hash)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=inline_kb)

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
