"""Init

Revision ID: 9f2de88b89be
Revises: 
Create Date: 2024-07-03 14:38:50.698730

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text
from sqlalchemy.dialects import postgresql

from bot.database.models.base import GUID, SLBigInteger

# revision identifiers, used by Alembic.
revision: str = '9f2de88b89be'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
bind = op.get_bind()


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('subscribes',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=128), nullable=True),
    sa.Column('days', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('visible', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_subscribes_id'), 'subscribes', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('username', sa.VARCHAR(length=32), nullable=True),
    sa.Column('join', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('join_to_group', sa.DateTime(timezone=True), nullable=True),
    sa.Column('subscribe_expire', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('ref', GUID(), nullable=True),
    sa.Column('views_left', sa.Integer(), nullable=True),
    sa.Column('invite_from', sa.BigInteger(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_invite_from'), 'users', ['invite_from'], unique=False)
    op.create_index(op.f('ix_users_ref'), 'users', ['ref'], unique=False)
    op.create_table('payments_history',
    sa.Column('id', SLBigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('telegram_payment_charge_id', sa.String(length=64), nullable=True),
    sa.Column('provider_payment_charge_id', sa.String(length=64), nullable=True),
    sa.Column('subscribe_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['subscribe_id'], ['subscribes.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_history_id'), 'payments_history', ['id'], unique=False)
    op.create_index(op.f('ix_payments_history_user_id'), 'payments_history', ['user_id'], unique=False)
    op.create_table('user_actions',
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('name', sa.VARCHAR(length=128), nullable=True),
    sa.Column('params', postgresql.JSONB(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('timestamp'),
    timescaledb_hypertable={'time_column_name': 'timestamp'}
    )
    op.create_index(op.f('ix_user_actions_user_id'), 'user_actions', ['user_id'], unique=False)
    # ### end Alembic commands ###
    bind.commit()
    bind.execution_options(isolation_level="AUTOCOMMIT").execute(text(
        "CREATE DATABASE metabase"
    ))



def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_actions_user_id'), table_name='user_actions')
    op.drop_table('user_actions')
    op.drop_index(op.f('ix_payments_history_user_id'), table_name='payments_history')
    op.drop_index(op.f('ix_payments_history_id'), table_name='payments_history')
    op.drop_table('payments_history')
    op.drop_index(op.f('ix_users_ref'), table_name='users')
    op.drop_index(op.f('ix_users_invite_from'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_subscribes_id'), table_name='subscribes')
    op.drop_table('subscribes')
    # ### end Alembic commands ###
    bind.commit()
    bind.execution_options(isolation_level="AUTOCOMMIT").execute(text(
        "DROP DATABASE IF EXISTS metabase"
    ))
